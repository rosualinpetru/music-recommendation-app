object CompilerSettings {

  private val implicitImports = Seq(
    "java.lang",
    "scala",
    "scala.Predef",
    "cats",
    "cats.effect",
    "cats.implicits",
    "cats.effect.implicits",
    "cats.effect.std",
  )

  val compilerFlags: Seq[String] = Seq(
    "-P:bm4:no-filtering:y",
    "-P:bm4:no-map-id:y",
    "-P:bm4:no-tupling:y",
    "-P:bm4:implicit-patterns:y",
    "-encoding",
    "utf8",
    "-explaintypes",
    "-feature",
    "-language:existentials",
    "-language:experimental.macros",
    "-language:higherKinds",
    "-language:implicitConversions",
    "-unchecked",
    "-Xcheckinit",
    "-Xlint:adapted-args",
    "-Xlint:constant",
    "-Xlint:delayedinit-select",
    "-Xlint:deprecation",
    "-Xlint:doc-detached",
    "-Xlint:inaccessible",
    "-Xlint:infer-any",
    "-Xlint:missing-interpolator",
    "-Xlint:nullary-unit",
    "-Xlint:option-implicit",
    "-Xlint:package-object-classes",
    "-Xlint:poly-implicit-overload",
    "-Xlint:private-shadow",
    "-Xlint:stars-align",
    "-Xlint:strict-unsealed-patmat",
    "-Xlint:type-parameter-shadow",
    "-Xlint:-byname-implicit",
    "-Wdead-code",
    "-Wextra-implicit",
    "-Wnumeric-widen",
    "-Wunused:nowarn",
    "-Wunused:implicits",
    "-Wunused:explicits",
    "-Wunused:imports",
    "-Wunused:locals",
    "-Wunused:params",
    "-Wunused:patvars",
    "-Wunused:privates",
    "-Wvalue-discard",
    "-Wconf:any:warning-verbose",
    "-Vimplicits",
    "-Vtype-diffs",
    "-Ymacro-annotations",
    s"-Yimports:${implicitImports.mkString(",")}"
  )
}